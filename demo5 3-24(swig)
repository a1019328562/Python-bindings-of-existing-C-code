//example.i
%module example
%{
#include "example.h"
%}

%include "std_vector.i"
%include "std_string.i"
%apply const std::string& {std::string*};
// Instantiate templates used by example
namespace std {
   %template(IntVector) vector<int>;
   %template(DoubleVector) vector<double>;
   %template(StringVector) vector<string>;
}

class DB{
	public: 
	int name;
	void foo1(const std::vector<int>& X);
	void foo2(const std::vector<std::string>& X);
};
------------------------------------
//example.h
#include <vector>
#include <algorithm>
#include <functional>
#include <numeric>
#include<string>
#include<iostream>
using namespace std;
class DB{
	public:
	int name;
	void foo1(const vector<int>& X){
	for(int i=0;i<X.size();i++) cout << X[i] <<endl;
};
	void foo2(const vector<string>& X){
	for(int i=0;i<X.size();i++) cout << X[i] << endl;
};
};
 
------------------------------------
--------------------------------------
-------------------------------------------
终端运行如下代码：
chao@SHF-SERVER:~/Wangzuo$ swig -c++ -python example.i
chao@SHF-SERVER:~/Wangzuo$ g++ -shared -std=c++11 -fpic example.h example_wrap.cxx -I/usr/include/python2.7 -o _example.so
chao@SHF-SERVER:~/Wangzuo$ python
Python 2.7.15rc1 (default, Nov 12 2018, 14:31:15) 
[GCC 7.3.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import example
>>> a=example.DB()
>>> Vec=example.StringVector()
>>> Vec.append("Test")
>>> Vec.append("String")
>>> a.foo2(Vec)
Test
String
>>> 

